version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expense_tracker_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: expense_tracker_prod
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./src/databases/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - expense_tracker_prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d expense_tracker_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # NestJS API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: expense_tracker_api_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${PORT:-9009}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DB_DATABASE: expense_tracker_prod
      DB_DIALECT: postgres
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      DEFAULT_PASSWORD: ${DEFAULT_PASSWORD:-admin123}
      DEFAULT_TIME_ZONE: ${DEFAULT_TIME_ZONE:-Asia/Bangkok}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${PORT:-9009}:9009"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expense_tracker_prod_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9009/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"



  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: expense_tracker_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - expense_tracker_prod_network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_prod_data:
    driver: local

networks:
  expense_tracker_prod_network:
    driver: bridge
